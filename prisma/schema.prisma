// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // references
  foundItems FoundItem[]
  lostItems  LostItem[]
  claims     Claim[]
  profile    UserProfile?

  @@map("users")
}

model FoundItemCategory {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationship 
  foundItems FoundItem[]
  lostItems  LostItem[]

  @@map("founditemcategories")
}

model FoundItem {
  id            String   @id @default(uuid())
  userId        String
  categoryId    String
  foundItemName String
  description   String
  location      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // references 
  user     User              @relation(fields: [userId], references: [id])
  category FoundItemCategory @relation(fields: [categoryId], references: [id])
  claims   Claim[]

  @@map("founditems")
}

model Claim {
  id                     String       @id @default(uuid())
  userId                 String
  foundItemId            String
  status                 CLAIM_STATUS @default(PENDING)
  distinguishingFeatures String
  lostDate               DateTime
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt

  // references 
  user      User      @relation(fields: [userId], references: [id])
  foundItem FoundItem @relation(fields: [foundItemId], references: [id])

  // Belongs to one User. Belongs to one FoundItemCategory
  @@unique([userId, foundItemId])
  @@map("claims")
}

// lost items 
model LostItem {
  id           String       @id @default(uuid())
  userId       String
  categoryId   String
  status       CLAIM_STATUS @default(PENDING)
  lostItemName String
  description  String
  location     String
  lostDate     DateTime
  img          String?
  phone        String?
  email        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // references 
  user     User              @relation(fields: [userId], references: [id])
  category FoundItemCategory @relation(fields: [categoryId], references: [id])

  @@map("lostitems")
}

model UserProfile {
  id        String   @id @default(uuid())
  userId    String   @unique
  bio       String
  age       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // references 
  user User @relation(fields: [userId], references: [id])

  @@map("userProfiles")
}

// enums 
enum CLAIM_STATUS {
  PENDING
  APPROVED
  REJECTED
}
